imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: config_easyadmin.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: fr


    niveau00: Oeuf
    niveau01: Oisillon
    niveau02: Mésange
    niveau03: Pic noir
    niveau04: Perroquet
    niveau05: Grand Héron
    niveau06: Grue
    niveau07: Aigle Royal
    niveau08: Hirondelle Rustique
    niveau09: Black Stork
    niveau10: Imperial Eagle
    obseravtions_directory: '%kernel.project_dir%/web/bundles/naocore/img/oiseaux/observations'
    list_limit: 10
    gps_distance: 10



framework:
    #esi: ~
    translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true
    serializer:
        enabled: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    form_themes:
        - 'bootstrap_3_layout.html.twig'

    globals:

        niveau00: Oeuf
        niveau01: Oisillon
        niveau02: Mésange
        niveau03: Pic noir
        niveau04: Perroquet
        niveau05: Grand Héron
        niveau06: Grue
        niveau07: Aigle Royal
        niveau08: Hirondelle Rustique
        niveau09: Black Stork
        niveau10: Imperial Eagle
        jwt: "@app.jwt"



# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.project_dir%/var/data/data.sqlite"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        dql:
            numeric_functions:
                rand: DoctrineExtensions\Query\Mysql\Rand

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

# Fos User Configuration
fos_rest:
     routing_loader:
         default_format: json

lexik_jwt_authentication:
     private_key_path: '%jwt_private_key_path%'
     public_key_path:  '%jwt_public_key_path%'
     pass_phrase:      '%jwt_key_pass_phrase%'
     token_ttl:        '%jwt_token_ttl%'
     user_identity_field: email
     encoder:
         # token encoder/decoder service - default implementation based on the namshi/jose library
         service:            lexik_jwt_authentication.encoder.default
         # crypto engine used by the encoder service
         crypto_engine:  openssl
         # encryption algorithm used by the encoder service
         signature_algorithm: RS256

     token_extractors:
         authorization_header:      # look for a token as Authorization Header
             enabled: false
             prefix:  Bearer
             name:    Authorization
         cookie:                    # check token in a cookie
             enabled: false
             name:    BEARER
         query_parameter:           # check token in query string parameter
             enabled: true
             name:    bearer

fos_user:
    db_driver: orm # other valid values are 'mongodb' and 'couchdb'
    firewall_name: main
    user_class: NAO\UserBundle\Entity\User
    from_email:
        address: "%mailer_user%"
        sender_name: "%mailer_user%"
    registration:
        form:
            type: NAO\UserBundle\Form\RegistrationType
        confirmation:

            enabled: true
            from_email:
                address: "%mailer_user%"
                sender_name: "%mailer_user%"

    profile:
        form:
            type: NAO\UserBundle\Form\ProfileType


